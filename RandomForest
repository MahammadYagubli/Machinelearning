#importing packages thatposible we could use
from sklearn.datasets import load_boston
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
#load boston dataset that shows about prices of the houses related to differect kind of factors
bds=load_boston()
#x will be the factors that we will be using
x=bds.data
#y will be the target the prices that could be usable
y=bds.target
#first thing we are creating our model with the data
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.25, train_size=0.75 , random_state=76)
#we will be using the minmaxscaler class to be able to conver the data to the between o and 
#1 values to be able to use  Random forest 
from sklearn.preprocessing import MinMaxScaler
sc=MinMaxScaler(feature_range=(0,1))
X_train=sc.fit_transform(X_train)
X_test=sc.fit_transform(X_test)
#  
# n 
y_train=y_train.reshape(-1, 1)
y_train=sc.fit_transform(y_train)
#importing random forest model to use
from sklearn.ensemble import RandomForestRegressor
#n_estimator means how many trees do we want to get the result mostly in practise if we aill
##increase the amounf of the trees the result will be more accurate but the computional time used 
#to calculate will be much in high amount
#max_depth means how much deeper should go the result also will be more accurate but after some values it wil not make any sense
random_f=RandomForestRegressor( n_estimators=500, max_depth=20 , random_state=33)
random_f.fit(X_train, y_train)
predicted_random_f=random_f.predict(X_test)
predicted_random_f=predicted_random_f.reshape(-1,1)
predicted_random_f=sc.inverse_transform(predicted_random_f)
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import math
mae=mean_absolute_error(y_test, predicted_random_f)
mse=mean_squared_error(y_test, predicted_random_f)
rmse=math.sqrt(mse)
r2=r2_score(y_test, predicted_random_f)
def mean_absolute_percentage_error(y_true, y_pred):
    y_true, y_test=np.array(y_true), np.array(y_pred)
    return np.mean(np.abs(y_true-y_pred)/y_true)*100
mape=mean_absolute_percentage_error(y_test, predicted_random_f)
mape

